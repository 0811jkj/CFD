/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.1.x                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     icoFoam;

//startFrom       startTime;
startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         5;

//deltaT          0.01;
deltaT          0.02;

writeControl    adjustableRunTime;

/*
adjustableRunTime
clockTime
cpuTime
runTime
timeStep
*/

writeInterval   1;

maxCo           5;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;


// ************************************************************************* //


functions
(

///////////////////////////////////////////////////////////////////////////

    fieldAverageCyl
    {
        type            fieldAverage;
        functionObjectLibs ("libfieldFunctionObjects.so");
        enabled         true;//false;
       outputControl   outputTime;

 //       outputControl   timeStep;
//        outputInterval  1;
        timeStart      20;
        timeEnd       120;
//cleanRestart true;

        fields
        (
            U
            {
                mean        on;
                prime2Mean  off;
                base        time;
            }

            p
            {
                mean        on;
                prime2Mean  off;
                base        time;
            }
        );
    }

///////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////

forcesCyl
{
	type forces;
	functionObjectLibs ("libforces.so");

	//outputControl outputTime;
	outputControl   timeStep;
	outputInterval  1;

	//// Patches to sample
	//patches ("body1" "body2" "body3");
	patches ("cylinder");

	//// Name of fields
	pName p;
	Uname U;

	//// Density
	rhoName rhoInf;
	rhoInf 1.225;

	//// Centre of rotation
	CofR (0 0 0);
}

///////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////

forceCoeffsCyl
{
	// rhoInf - reference density
	// CofR - Centre of rotation
	// dragDir - Direction of drag coefficient
	// liftDir - Direction of lift coefficient
	// pitchAxis - Pitching moment axis
	// magUinf - free stream velocity magnitude
	// lRef - reference length
	// Aref - reference area
	type forceCoeffs;
	functionObjectLibs ("libforces.so");
	//patches ("body1" "body2" "body3");
	patches ("wing");

	pName p;
	Uname U;
	rhoName rhoInf;
	rhoInf 1.0;

	//// Dump to file
	log true;

	CofR (0.0 0 0);
	liftDir (0 1 0);
	dragDir (1 0 0);
	pitchAxis (0 0 1);
	magUInf 1.0;
	lRef 1.0;         // reference enght
	Aref 1.0;         // reference area 1 for 2d

        outputControl   timeStep;
        outputInterval  1;
}

///////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////

minmaxdomainCyl
{
	type fieldMinMax;
	//type banana;

	functionObjectLibs ("libfieldFunctionObjects.so");

	enabled true;

	mode component;

	outputControl timeStep;
	outputInterval 1;

	log true;

	fields (p U);
}

///////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////

probes1
{
	type probes;
	functionObjectLibs ("libsampling.so");
	//dictionary probesDict;
	probeLocations
	(
	(2 1 0)
	);
	fields
	(p U);

        outputControl       timeStep;
        outputInterval      1;
}

///////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////

probes2
{
	type probes;
	functionObjectLibs ("libsampling.so");
	//dictionary probesDict;
	probeLocations
	(
	(5 0.5 0)
	(5 0 0)
	(5 -0.5 0)
	(10 0.5 0)
	(10 0 0)
	(10 -0.5 0)
	);
	fields
	(p U);

        outputControl       timeStep;
        outputInterval      1;
}

///////////////////////////////////////////////////////////////////////////





///////////////////////////////////////////////////////////////////////////

   surfaceSampling
    {
        // Sample near-wall velocity

        type surfaces;

        // Where to load it from (if not already in solver)
        functionObjectLibs ("libsampling.so");
        enabled         true;
        outputControl   outputTime;

        interpolationScheme cellPoint;

        surfaceFormat vtk;

        // Fields to be sampled
        fields
        (
            p
        );

        surfaces
        (
            nearWall
            {
                type            patch;
                patches         ( "cylinder" );
                //distance        0;
                interpolate     true;
                triangulate     false;
            }
        );
    }

///////////////////////////////////////////////////////////////////////////


);
